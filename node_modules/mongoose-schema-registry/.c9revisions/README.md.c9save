{"ts":1360024688189,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"mongoose-schema-registry\n========================\n\nThis allows users to register schemas without creating a mongoose model.  This allows extension of schemas later on prior to registering those models."]],"start1":0,"start2":0,"length1":0,"length2":201}]],"length":201}
{"contributors":[],"silentsave":false,"ts":1374250169704,"patch":[[{"diffs":[[0,"\n\nTh"],[-1,"is"],[1,"e Mongoose Schema Registry"],[0," allows "],[-1,"us"],[1,"develop"],[0,"ers "]],"start1":49,"start2":49,"length1":20,"length2":49}]],"length":230,"saved":false}
{"ts":1374250822808,"patch":[[{"diffs":[[0," models."],[1,"\n\nThe following quick example should help you get started (taken from the ghiraldi framework mvc.js file):\n    // First, declare the registry object.\n    var registry = require('mongoose-schema-registry'),\n\n    // The registry fires events when schemas are added.\n    registry.on('add', function(tag, schema) {\n        // tag contains the name you gave the schema when you added it.\n        // schema is the actual schema added.\n    });\n    \n    // Add a schema to the registry using the add method\n    registry.add('schema_name', schema);\n    \n    \nYou can modify an existing schema by calling the getSchema method.  Since the\nregistry is a singleton, requiring will give you the same object with the already\nregistered schemas.\n    "]],"start1":222,"start2":222,"length1":8,"length2":742}]],"length":964,"saved":false}
{"ts":1374251084127,"patch":[[{"diffs":[[0," file):\n"],[1,"    File1.js\n"],[0,"    // F"]],"start1":329,"start2":329,"length1":16,"length2":29},{"diffs":[[0,"chemas.\n    "],[1,"// File2.js\n    var registry = require('mongoose-schema-registry');\n    \n    var testSchema = registry.getSchema('testSchema');\n    // From here, you can add things to your test schema.\n    ..\n    // When you're done, just re-add the schema.  The new one will clobber \n    // the old one.\n    registry.add('testSchema', testSchema);\n    \nTo finally register the schemas into mongoose models, just iterate through the\nschemas and call the mongoose.model method.\n    var keys = registry.getKeys();\n    _.each(keys, function(key, index, list) {\n        var thisSchema = registry.getSchema(key);\n        mongoose.model(key,  thisSchema);\n    });"]],"start1":965,"start2":965,"length1":12,"length2":653}]],"length":1618,"saved":false}
{"ts":1374251202714,"patch":[[{"diffs":[[0," file):\n"],[1,"```javascript\n"],[0,"    File"]],"start1":329,"start2":329,"length1":16,"length2":30},{"diffs":[[0,"chema);\n"],[-1,"    "],[1,"```"],[0,"\n    \nYo"]],"start1":789,"start2":789,"length1":20,"length2":19},{"diffs":[[0,"chemas.\n"],[1,"```javascript\n"],[0,"    // F"]],"start1":978,"start2":978,"length1":16,"length2":30},{"diffs":[[0,"chema);\n"],[-1,"    "],[1,"```"],[0,"\nTo fina"]],"start1":1329,"start2":1329,"length1":20,"length2":19},{"diffs":[[0,"method.\n"],[1,"```javascript\n"],[0,"    var "]],"start1":1456,"start2":1456,"length1":16,"length2":30},{"diffs":[[0,"chema);\n"],[-1,""],[0,"    });"],[1,"\n```"]],"start1":1643,"start2":1643,"length1":15,"length2":19}]],"length":1662,"saved":false}
{"ts":1374251255214,"patch":[[{"diffs":[[0,"ript\n   "],[1," //"],[0," File1.j"]],"start1":346,"start2":346,"length1":16,"length2":19}]],"length":1665,"saved":false}
